[{"/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Setup.js":"1","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/api.js":"2","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Cpu.js":"3","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/api.js":"4","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/api.js":"5","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Dashboard.js":"6","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/reducer.js":"7","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/RequestCard.js":"8","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Ram.js":"9","/Users/ashleydyson/Documents/Petio/petio/admin/src/index.js":"10","/Users/ashleydyson/Documents/Petio/petio/admin/src/App.js":"11","/Users/ashleydyson/Documents/Petio/petio/admin/src/serviceWorker.js":"12","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/store.js":"13","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Sidebar.js":"14","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Login.js":"15","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Settings.js":"16","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/reducers.js":"17","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/index.js":"18","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/CarouselLoading.js":"19","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Carousel.js":"20","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Bandwidth.js":"21","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Sessions.js":"22","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/reducer.js":"23","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/reducer.js":"24","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/radarr.js":"25","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/general.js":"26","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/sonarr.js":"27","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/actions.js":"28","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/index.js":"29","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/index.js":"30","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/SessionMedia.js":"31","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/actionTypes.js":"32","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/actions.js":"33","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/actions.js":"34","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/MovieCard.js":"35","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/TvCard.js":"36","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Requests.js":"37","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/RequestsTable.js":"38","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/modal.js":"39","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Users.js":"40","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Modal.js":"41"},{"size":13394,"mtime":1610628255019,"results":"42","hashOfConfig":"43"},{"size":1584,"mtime":1610992915039,"results":"44","hashOfConfig":"43"},{"size":1350,"mtime":1607428895037,"results":"45","hashOfConfig":"43"},{"size":6903,"mtime":1610557129080,"results":"46","hashOfConfig":"43"},{"size":1254,"mtime":1610985553212,"results":"47","hashOfConfig":"43"},{"size":8359,"mtime":1610985566350,"results":"48","hashOfConfig":"43"},{"size":578,"mtime":1610296650398,"results":"49","hashOfConfig":"43"},{"size":2067,"mtime":1610985786120,"results":"50","hashOfConfig":"43"},{"size":1409,"mtime":1607428895037,"results":"51","hashOfConfig":"43"},{"size":569,"mtime":1607707386861,"results":"52","hashOfConfig":"43"},{"size":4288,"mtime":1610834676236,"results":"53","hashOfConfig":"43"},{"size":5086,"mtime":1607428895043,"results":"54","hashOfConfig":"43"},{"size":376,"mtime":1607428895041,"results":"55","hashOfConfig":"43"},{"size":4193,"mtime":1610627060493,"results":"56","hashOfConfig":"43"},{"size":2807,"mtime":1610452297522,"results":"57","hashOfConfig":"43"},{"size":2474,"mtime":1610628251588,"results":"58","hashOfConfig":"43"},{"size":236,"mtime":1607428895041,"results":"59","hashOfConfig":"43"},{"size":874,"mtime":1610557140682,"results":"60","hashOfConfig":"43"},{"size":1744,"mtime":1607428895036,"results":"61","hashOfConfig":"43"},{"size":292,"mtime":1607428895036,"results":"62","hashOfConfig":"43"},{"size":1707,"mtime":1607428895036,"results":"63","hashOfConfig":"43"},{"size":7152,"mtime":1607463865112,"results":"64","hashOfConfig":"43"},{"size":703,"mtime":1608131361372,"results":"65","hashOfConfig":"43"},{"size":3519,"mtime":1609944869698,"results":"66","hashOfConfig":"43"},{"size":9416,"mtime":1609699872428,"results":"67","hashOfConfig":"43"},{"size":5904,"mtime":1607958171759,"results":"68","hashOfConfig":"43"},{"size":9349,"mtime":1609699877034,"results":"69","hashOfConfig":"43"},{"size":9084,"mtime":1610557055253,"results":"70","hashOfConfig":"43"},{"size":108,"mtime":1607428895042,"results":"71","hashOfConfig":"43"},{"size":70,"mtime":1607428895041,"results":"72","hashOfConfig":"43"},{"size":3152,"mtime":1607428895038,"results":"73","hashOfConfig":"43"},{"size":763,"mtime":1610296298852,"results":"74","hashOfConfig":"43"},{"size":1891,"mtime":1610985510262,"results":"75","hashOfConfig":"43"},{"size":4396,"mtime":1610390152238,"results":"76","hashOfConfig":"43"},{"size":3682,"mtime":1607428895037,"results":"77","hashOfConfig":"43"},{"size":3631,"mtime":1607428895039,"results":"78","hashOfConfig":"43"},{"size":1935,"mtime":1611076814141,"results":"79","hashOfConfig":"43"},{"size":9500,"mtime":1611076947860,"results":"80","hashOfConfig":"43"},{"size":4673,"mtime":1609699996187,"results":"81","hashOfConfig":"43"},{"size":4720,"mtime":1611083223537,"results":"82","hashOfConfig":"43"},{"size":716,"mtime":1611076572327,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"xc4gh7",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"86"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"86"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Setup.js",[],["189","190"],"/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/api.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Cpu.js",["191"],"import React from 'react';\nimport {\n\tLineChart,\n\tLine,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tResponsiveContainer,\n} from 'recharts';\n\nclass Cpu extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\tlet height = window.innerWidth >= 992 ? 300 : 200;\n\t\tlet margin =\n\t\t\twindow.innerWidth >= 992\n\t\t\t\t? { top: 10, right: 0, left: -40, bottom: 0 }\n\t\t\t\t: { top: 10, right: 0, left: -60, bottom: 0 };\n\t\tconst formatter = (value) => value;\n\t\treturn (\n\t\t\t<ResponsiveContainer width=\"100%\" height={height}>\n\t\t\t\t<LineChart data={this.props.cpu} margin={margin}>\n\t\t\t\t\t<XAxis dataKey=\"at\" />\n\t\t\t\t\t<YAxis\n\t\t\t\t\t\ttickFormatter={formatter}\n\t\t\t\t\t\tallowDecimals={false}\n\t\t\t\t\t\tticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\n\t\t\t\t\t\tinterval={0}\n\t\t\t\t\t/>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Legend iconType=\"circle\" align=\"right\" />\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"processCpuUtilization\"\n\t\t\t\t\t\tstroke=\"#9ad186\"\n\t\t\t\t\t\tdot={false}\n\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\tactiveDot={{ r: 8 }}\n\t\t\t\t\t\tisAnimationActive={false}\n\t\t\t\t\t\tname=\"Plex\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"hostCpuUtilization\"\n\t\t\t\t\t\tstroke=\"#f1335e\"\n\t\t\t\t\t\tdot={false}\n\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\tisAnimationActive={false}\n\t\t\t\t\t\tname=\"System\"\n\t\t\t\t\t/>\n\t\t\t\t</LineChart>\n\t\t\t</ResponsiveContainer>\n\t\t);\n\t}\n}\n\nexport default Cpu;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/api.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/api.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Dashboard.js",["192","193","194","195","196","197"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Api from \"../data/Api\";\nimport User from \"../data/User\";\nimport Carousel from \"../components/Carousel\";\nimport CarouselLoading from \"../components/CarouselLoading\";\nimport RequestCard from \"../components/RequestCard\";\nimport Bandwidth from \"../components/Bandwidth\";\nimport Cpu from \"../components/Cpu\";\nimport Ram from \"../components/Ram\";\nimport Sessions from \"../components/Sessions\";\n\nNumber.prototype.round = function (places) {\n  return +(Math.round(this + \"e+\" + places) + \"e-\" + places);\n};\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      requests: false,\n      pending: false,\n      bandwidth: false,\n      serverInfo: false,\n      sessions: false,\n      sessionsCollapsed: true,\n      issues: false,\n    };\n\n    this.getRequests = this.getRequests.bind(this);\n    this.toggleSessions = this.toggleSessions.bind(this);\n    this.getIssues = this.getIssues.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.state.pending && !this.state.requests) {\n      this.getRequests();\n    }\n    this.pollServer();\n    this.pollServerDelay();\n    this.getIssues();\n    this.heartbeat = setInterval(() => this.pollServer(), 1000);\n    this.heartbeatDelay = setInterval(() => this.pollServerDelay(), 10000);\n\n    let page = document.querySelectorAll(\".page-wrap\")[0];\n    page.scrollTop = 0;\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate() {\n    if (!this.state.pending && !this.state.requests) {\n      this.getRequests();\n    }\n  }\n\n  async getIssues() {\n    let issues = await Api.getIssues();\n    this.setState({\n      issues: issues,\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.heartbeat);\n    clearInterval(this.heartbeatDelay);\n  }\n\n  timeDifference(previous) {\n    let now = new Date();\n    let current = Math.round(now.getTime() / 1000);\n    previous = new Date(previous);\n    var msPerMinute = 60;\n    var msPerHour = msPerMinute * 60;\n    var msPerDay = msPerHour * 24;\n\n    var elapsed = current - previous;\n\n    // return elapsed;\n\n    if (elapsed < msPerMinute) {\n      return Math.round(elapsed) + \"s\";\n    } else if (elapsed < msPerHour) {\n      let minutes = Math.floor(elapsed / msPerMinute);\n      let seconds = elapsed - minutes * 60;\n      if (minutes === 2 && seconds > 1) return false;\n      return `${minutes}m${seconds}s`;\n    } else {\n      return current;\n    }\n  }\n\n  pollServer() {\n    Api.bandwidth()\n      .then((res) => {\n        // console.log(res);\n        let data = {};\n        let bWidth = [];\n        res.forEach((el) => {\n          let type = el[\"lan\"] ? \"Local\" : \"Remote\";\n          let timestamp = el[\"at\"];\n          if (data[timestamp]) {\n            data[timestamp][type] += el[\"bytes\"] * 8;\n          } else {\n            let time = this.timeDifference(timestamp);\n            if (!time) return;\n            data[timestamp] = {};\n            data[timestamp].name = time;\n            data[timestamp].Local = 0;\n            data[timestamp].Remote = 0;\n            data[timestamp][type] = el[\"bytes\"] * 8;\n          }\n        });\n        Object.keys(data).map((key) => {\n          bWidth.push(data[key]);\n        });\n\n        this.setState({\n          bandwidth: bWidth,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n        clearInterval(this.heartbeat);\n      });\n  }\n\n  pollServerDelay() {\n    Api.serverInfo()\n      .then((res) => {\n        let data = res.StatisticsResources;\n        let dataFormatted = [];\n        data.map((item) => {\n          let time = this.timeDifference(item.at);\n          item.at = time;\n          if (time) {\n            dataFormatted.push(item);\n          }\n        });\n\n        this.setState({\n          serverInfo: dataFormatted,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n        // clearInterval(this.heartbeatDelay);\n      });\n\n    Api.currentSessions()\n      .then((res) => {\n        this.setState({\n          sessions: res.Metadata,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n        // clearInterval(this.heartbeatDelay);\n      });\n  }\n\n  toggleSessions() {\n    this.setState({\n      sessionsCollapsed: this.state.sessionsCollapsed ? false : true,\n    });\n  }\n\n  getRequests() {\n    let requests = this.props.user.requests;\n    if (!requests) {\n      User.getRequests(true);\n    } else {\n      this.setState({\n        requests: true,\n        pending: true,\n      });\n\n      Object.keys(requests).map((key) => {\n        let request = requests[key];\n        if (request.type === \"movie\") {\n          Api.movie(key);\n        } else {\n          Api.series(key);\n        }\n      });\n\n      this.setState({\n        pending: false,\n      });\n    }\n  }\n\n  formatIssue(issue) {\n    switch (issue) {\n      case \"episodes\":\n        return \"Missing Episodes\";\n      case \"subs\":\n        return \"Missing / Wrong Subtitles\";\n      case \"bad-video\":\n        return \"Bad Quality / Video Issue\";\n      case \"bad-audio\":\n        return \"Audio Issue / Audio Sync\";\n      default:\n        return \"Not Specified\";\n    }\n  }\n\n  render() {\n    let requests = this.props.user.requests;\n    return (\n      <div className=\"widget--board\">\n        <div className=\"widget--item widget--item__30\">\n          <div className=\"widget--item--inner\">\n            <div className=\"widget--title\">Bandwidth</div>\n            <hr />\n            {this.state.bandwidth ? <Bandwidth bandwidth={this.state.bandwidth} /> : null}\n          </div>\n        </div>\n        <div className=\"widget--item widget--item__30\">\n          <div className=\"widget--item--inner\">\n            <div className=\"widget--title\">CPU</div>\n            <hr />\n            {this.state.serverInfo ? <Cpu cpu={this.state.serverInfo} /> : null}\n          </div>\n        </div>\n        <div className=\"widget--item widget--item__30\">\n          <div className=\"widget--item--inner\">\n            <div className=\"widget--title\">RAM</div>\n            <hr />\n            {this.state.serverInfo ? <Ram ram={this.state.serverInfo} /> : null}\n          </div>\n        </div>\n        <div className=\"widget--item\">\n          <div className=\"widget--item--inner\">\n            <div className=\"widget--title\">Requests</div>\n            <hr />\n            {!requests ? (\n              <CarouselLoading />\n            ) : (\n              <Carousel>\n                {Object.keys(requests).map((key) => {\n                  let request = this.props.api.movie_lookup[key];\n                  let users = requests[key].users;\n                  if (requests[key].type === \"tv\") {\n                    request = this.props.api.series_lookup[key];\n                  }\n                  if (!request) return null;\n                  return <RequestCard key={key} users={users} request={request} />;\n                })}\n              </Carousel>\n            )}\n          </div>\n        </div>\n\n        <div className={\"widget--item widget--item__50 \" + (this.state.sessionsCollapsed ? \"collapsed\" : \"\")}>\n          <div className=\"widget--item--inner\">\n            <div className=\"session--toggle\" onClick={this.toggleSessions}>\n              {this.state.sessionsCollapsed ? \"Details\" : \"Overview\"}\n            </div>\n            <div className=\"widget--title\">Now Playing</div>\n            <hr />\n            <Sessions sessions={this.state.sessions} />\n          </div>\n        </div>\n        <div className=\"widget--item widget--item__50\">\n          <div className=\"widget--item--inner\">\n            <div className=\"widget--title\">Issues</div>\n            <hr />\n            {this.state.issues.length > 0 ? (\n              this.state.issues.map((issue) => {\n                return (\n                  <div className=\"issue-item\" key={`issue_${issue._id}`}>\n                    <p className=\"issue-item--title\">{issue.title}</p>\n                    <p className=\"issue-item--detail\">\n                      <span>Issue:</span> {this.formatIssue(issue.issue)}\n                    </p>\n                    <p className=\"issue-item--detail\">\n                      <span>Comment:</span> {issue.comment}\n                    </p>\n                  </div>\n                );\n              })\n            ) : (\n              <p>No issues</p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/reducer.js",["198"],"import * as types from \"../actionTypes\";\n\nexport default function (\n  state = {\n    token: false,\n  },\n  action\n) {\n  switch (action.type) {\n    case types.PLEX_TOKEN:\n      return {\n        ...state,\n        token: action.token,\n      };\n    case types.PLEX_DETAILS:\n      return {\n        ...state,\n        servers: action.servers,\n        user: action.user,\n      };\n\n    case types.PLEX_SERVER:\n      return {\n        ...state,\n        servers: {\n          ...state.servers,\n          [action.key]: action.server,\n        },\n      };\n\n    default:\n      return state;\n  }\n}\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/RequestCard.js",["199"],"import React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nclass RequestCard extends React.Component {\n  render() {\n    let request = this.props.request;\n    if (!request) {\n      return null;\n    }\n    let img = request.poster_path ? <img src={`https://image.tmdb.org/t/p/w200/${request.poster_path}`} alt={request.title} /> : <div className=\"no-poster\"></div>;\n    let type = this.props.user.requests[request.id].type;\n\n    return (\n      <div key={request.id} data-key={request.id} className={\"card type--movie-tv\"}>\n        <div className=\"card--inner\">\n          <Link to={`/${type === \"tv\" ? \"series\" : \"movie\"}/${request.id}`} className=\"full-link\"></Link>\n\n          <div className=\"request-count\">{Object.keys(this.props.user.requests[request.id].users).length}</div>\n\n          <div className=\"image-wrap\">\n            {img}\n            <div className=\"request-users\">\n              {this.props.users.map((user_id) => {\n                return (\n                  <div className=\"request-user\">\n                    <div className=\"user-thumb\">\n                      <img src={`/api/user/thumb/${user_id}`} />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"text-wrap\">\n            <p className=\"title\" title={request.title || request.name}>\n              {request.title || request.name}\n              <span className=\"year\">{type === \"movie\" ? `(${new Date(request.release_date).getFullYear()})` : `(${new Date(request.first_air_date).getFullYear()})`}</span>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nRequestCard = withRouter(RequestCard);\n\nfunction RequestCardContainer(props) {\n  return <RequestCard tmdb={props.tmdb} user={props.user} users={props.users} request={props.request} />;\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    tmdb: state.tmdb,\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps)(RequestCardContainer);\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Ram.js",["200"],"import React from 'react';\nimport {\n\tLineChart,\n\tLine,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tResponsiveContainer,\n} from 'recharts';\n\nclass Ram extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\tlet height = window.innerWidth >= 992 ? 300 : 200;\n\t\tlet margin =\n\t\t\twindow.innerWidth >= 992\n\t\t\t\t? { top: 10, right: 0, left: -40, bottom: 0 }\n\t\t\t\t: { top: 10, right: 0, left: -60, bottom: 0 };\n\t\tconst formatter = (value) => value;\n\t\treturn (\n\t\t\t<ResponsiveContainer width=\"100%\" height={height}>\n\t\t\t\t<LineChart data={this.props.ram} margin={margin}>\n\t\t\t\t\t<XAxis dataKey=\"at\" />\n\t\t\t\t\t<YAxis\n\t\t\t\t\t\ttickFormatter={formatter}\n\t\t\t\t\t\tallowDecimals={false}\n\t\t\t\t\t\tticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\n\t\t\t\t\t\tinterval={0}\n\t\t\t\t\t\ttick={window.innerWidth >= 992 ? true : false}\n\t\t\t\t\t/>\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Legend iconType=\"circle\" align=\"right\" />\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"processMemoryUtilization\"\n\t\t\t\t\t\tstroke=\"#33f1c5\"\n\t\t\t\t\t\tdot={false}\n\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\tactiveDot={{ r: 8 }}\n\t\t\t\t\t\tisAnimationActive={false}\n\t\t\t\t\t\tname=\"Plex\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"hostMemoryUtilization\"\n\t\t\t\t\t\tstroke=\"#bd86d1\"\n\t\t\t\t\t\tdot={false}\n\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\tisAnimationActive={false}\n\t\t\t\t\t\tname=\"System\"\n\t\t\t\t\t/>\n\t\t\t\t</LineChart>\n\t\t\t</ResponsiveContainer>\n\t\t);\n\t}\n}\n\nexport default Ram;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/index.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/App.js",["201","202","203"],"import React from \"react\";\nimport { HashRouter, Switch, Route, Link, withRouter, useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Sidebar from \"./components/Sidebar\";\nimport Login from \"./components/Login\";\nimport Dashboard from \"./page/Dashboard\";\nimport { ReactComponent as Spinner } from \"./assets/svg/spinner.svg\";\nimport Api from \"./data/Api\";\nimport Setup from \"./page/Setup\";\nimport Settings from \"./page/Settings\";\nimport Requests from \"./page/Requests\";\nimport Users from \"./page/Users\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoggedIn: false,\n      loading: true,\n      config: false,\n      configChecked: true,\n    };\n\n    this.changeLogin = this.changeLogin.bind(this);\n    this.checkConfig = this.checkConfig.bind(this);\n  }\n\n  checkConfig() {\n    this.setState({\n      configChecked: true,\n    });\n    Api.checkConfig()\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          config: res.config,\n          loading: false,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      });\n  }\n\n  changeLogin(value) {\n    this.setState({\n      isLoggedIn: value,\n    });\n  }\n\n  componentDidUpdate() {\n    if (!this.state.config && !this.state.configChecked) {\n      this.checkConfig();\n    }\n    if (this.state.isLoggedIn && Object.keys(this.props.api.users).length === 0) {\n      Api.allUsers();\n    }\n  }\n\n  componentDidMount() {\n    this.checkConfig();\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <div className=\"app\">\n          <div className=\"setup--wrap\">\n            <p className=\"main-title\">Error</p>\n            <p>Something's wrong I can feel it...</p>\n            <p>Ok, you've managed to get the admin front end to load. But it looks like I can't talk to the API service.</p>\n            <p>\n              Please make sure the API service has started and is still running without any errors. Just finished the setup wizard? If the API can't connect to the DB it will reject the configuration\n              and needs a restart, so check the logs.\n            </p>\n            <p>Still stuck? Please report your issue to the dev team on discord and we will do our best to help you!</p>\n          </div>\n        </div>\n      );\n    }\n    if (this.state.loading) {\n      return (\n        <div className=\"spinner\">\n          <Spinner />\n        </div>\n      );\n    }\n    if (this.state.config === false) {\n      return (\n        <div className=\"app\">\n          <div className=\"page-wrap\">\n            <Setup checkConfig={this.checkConfig} />\n          </div>\n        </div>\n      );\n    }\n    if (!this.state.isLoggedIn) {\n      return (\n        <div className=\"app\">\n          <Login logged_in={this.state.isLoggedIn} changeLogin={this.changeLogin} />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"app\">\n          <HashRouter>\n            <Sidebar changeLogin={this.changeLogin} />\n            <div className=\"view\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <div className=\"page-wrap\">\n                    <Dashboard user={this.props.user} api={this.props.api} />\n                  </div>\n                </Route>\n                <Route path=\"/settings\">\n                  <div className=\"page-wrap\">\n                    <Settings />\n                  </div>\n                </Route>\n                <Route path=\"/requests\">\n                  <div className=\"page-wrap\">\n                    <Requests user={this.props.user} api={this.props.api} />\n                  </div>\n                </Route>\n                <Route path=\"/users\">\n                  <div className=\"page-wrap\">\n                    <Users api={this.props.api} />\n                  </div>\n                </Route>\n              </Switch>\n            </div>\n          </HashRouter>\n        </div>\n      );\n    }\n  }\n}\n\nfunction AppContainer(props) {\n  return <App plex={props.plex} api={props.api} user={props.user} />;\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    plex: state.plex,\n    api: state.api,\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps)(AppContainer);\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/serviceWorker.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/data/store.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Sidebar.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Login.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Settings.js",["204","205"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter, Link, Switch, Route } from \"react-router-dom\";\n\nimport { ReactComponent as GeneralIcon } from \"../assets/svg/settings-general.svg\";\nimport General from \"./settings/general\";\nimport Radarr from \"./settings/radarr\";\nimport Sonarr from \"./settings/sonarr\";\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      parent: \"general\",\n      child: \"\",\n    };\n  }\n\n  componentDidMount() {\n    let page = document.querySelectorAll(\".page-wrap\")[0];\n    page.scrollTop = 0;\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    let current = this.props.location.pathname;\n    return (\n      <div className=\"settings--wrap\">\n        <div className=\"settings--menu\">\n          <Link to=\"/settings\" className={\"settings--menu--item \" + (current === \"/settings\" ? \"active\" : \"\")}>\n            <p>General</p>\n            <div className=\"icon\">\n              <GeneralIcon />\n            </div>\n          </Link>\n          <Link to=\"/settings/sonarr\" className={\"settings--menu--item \" + (current === \"/settings/sonarr\" ? \"active\" : \"\")}>\n            <p>Sonarr</p>\n            <div className=\"icon\">\n              <img className=\"\" src=\"https://raw.githubusercontent.com/Sonarr/Sonarr/phantom-develop/Logo/256.png\" />\n            </div>\n          </Link>\n          <Link to=\"/settings/radarr\" className={\"settings--menu--item \" + (current === \"/settings/radarr\" ? \"active\" : \"\")}>\n            <p>Radarr</p>\n            <div className=\"icon\">\n              <img className=\"png-safe\" src=\"https://avatars1.githubusercontent.com/u/25025331\" />\n            </div>\n          </Link>\n        </div>\n        <div className=\"settings--content\">\n          <Switch>\n            <Route exact path=\"/settings\">\n              <General />\n            </Route>\n            <Route path=\"/settings/sonarr\">\n              <Sonarr />\n            </Route>\n            <Route path=\"/settings/radarr\">\n              <Radarr />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nSettings = withRouter(Settings);\n\nfunction SettingsContainer(props) {\n  return <Settings plex={props.plex} api={props.api} user={props.user} checkConfig={props.checkConfig} />;\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    plex: state.plex,\n    api: state.api,\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps)(SettingsContainer);\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/reducers.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/index.js",["206"],"import {\n  getPopular,\n  movie,\n  series,\n  search,\n  clearSearch,\n  person,\n  top,\n  history,\n  get_plex_media,\n  bandwidth,\n  serverInfo,\n  currentSessions,\n  checkConfig,\n  saveConfig,\n  sonarrConfig,\n  sonarrOptions,\n  saveSonarrConfig,\n  saveRadarrConfig,\n  radarrConfig,\n  radarrOptions,\n  testSonarr,\n  testRadarr,\n  saveEmailConfig,\n  getEmailConfig,\n  testEmail,\n  getUser,\n  allUsers,\n  testMongo,\n  getIssues,\n} from \"./actions\";\n\nexport default {\n  getPopular,\n  movie,\n  series,\n  search,\n  clearSearch,\n  person,\n  top,\n  history,\n  get_plex_media,\n  bandwidth,\n  serverInfo,\n  currentSessions,\n  checkConfig,\n  saveConfig,\n  sonarrConfig,\n  sonarrOptions,\n  saveSonarrConfig,\n  saveRadarrConfig,\n  radarrConfig,\n  radarrOptions,\n  testSonarr,\n  testRadarr,\n  saveEmailConfig,\n  getEmailConfig,\n  testEmail,\n  getUser,\n  allUsers,\n  testMongo,\n  getIssues,\n};\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/CarouselLoading.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Carousel.js",["207"],"import React from 'react';\n\nconst widths = {\n\tsmall: 0,\n\tmedium: 0,\n\tlarge: 160,\n};\n\nclass Carousel extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className={`carousel`}>\n\t\t\t\t<div className=\"carousel--inner\">{this.props.children}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Carousel;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Bandwidth.js",["208"],"import React from 'react';\nimport {\n\tLineChart,\n\tLine,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tResponsiveContainer,\n} from 'recharts';\n\nclass Bandwidth extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\tformatBytes(bytes, decimals = 2) {\n\t\tif (bytes === 0) return '';\n\n\t\tconst k = 1000;\n\t\tconst dm = decimals < 0 ? 0 : decimals;\n\t\tconst sizes = [\n\t\t\t'bps',\n\t\t\t'kbps',\n\t\t\t'mbps',\n\t\t\t'gbps',\n\t\t\t'tbps',\n\t\t\t'pbps',\n\t\t\t'-',\n\t\t\t'-',\n\t\t\t'-',\n\t\t];\n\n\t\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\t\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + sizes[i];\n\t}\n\n\trender() {\n\t\tlet height = window.innerWidth >= 992 ? 300 : 200;\n\t\tlet margin =\n\t\t\twindow.innerWidth >= 992\n\t\t\t\t? { top: 10, right: 0, left: -15, bottom: 0 }\n\t\t\t\t: { top: 10, right: 0, left: -60, bottom: 0 };\n\t\tconst formatter = (value) => `${this.formatBytes(value)}`;\n\t\t// const formatter = (value) => value;\n\t\treturn (\n\t\t\t<ResponsiveContainer width=\"100%\" height={height}>\n\t\t\t\t<LineChart data={this.props.bandwidth} margin={margin}>\n\t\t\t\t\t<XAxis\n\t\t\t\t\t\tdataKey=\"name\"\n\t\t\t\t\t\tticks={['2m0s', '1m30s', '1m0s', '30s', '0s']}\n\t\t\t\t\t/>\n\t\t\t\t\t<YAxis tickFormatter={formatter} allowDecimals={false} />\n\t\t\t\t\t<CartesianGrid />\n\t\t\t\t\t<Legend iconType=\"circle\" align=\"right\" />\n\t\t\t\t\t<Tooltip />\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"Local\"\n\t\t\t\t\t\tstroke=\"#e69f23\"\n\t\t\t\t\t\tdot={false}\n\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t\tactiveDot={{ r: 8 }}\n\t\t\t\t\t\tisAnimationActive={false}\n\t\t\t\t\t/>\n\t\t\t\t\t<Line\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey=\"Remote\"\n\t\t\t\t\t\tstroke=\"#366dfc\"\n\t\t\t\t\t\tisAnimationActive={false}\n\t\t\t\t\t\tdot={false}\n\t\t\t\t\t\tstrokeWidth={2}\n\t\t\t\t\t/>\n\t\t\t\t</LineChart>\n\t\t\t</ResponsiveContainer>\n\t\t);\n\t}\n}\n\nexport default Bandwidth;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Sessions.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/reducer.js",["209"],"import * as types from '../actionTypes';\n\nexport default function (\n\tstate = {\n\t\tcurrent: false,\n\t\tlogged_in: false,\n\t\tlibrary_index: false,\n\t\temail: false,\n\t\trequests: false,\n\t},\n\taction\n) {\n\tswitch (action.type) {\n\t\tcase types.LOGIN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrent: action.data.user,\n\t\t\t\tlogged_in: true,\n\t\t\t};\n\n\t\tcase types.LOGOUT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrent: false,\n\t\t\t\tlogged_in: false,\n\t\t\t\tcredentials: false,\n\t\t\t};\n\n\t\tcase types.GET_REQUESTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: action.requests,\n\t\t\t};\n\n\t\tcase types.GET_REVIEWS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\treviews: {\n\t\t\t\t\t...state.reviews,\n\t\t\t\t\t[action.id]: action.reviews,\n\t\t\t\t},\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/reducer.js",["210"],"import * as types from \"../actionTypes\";\n\nexport default function (\n  state = {\n    user_roles: {\n      permissions: [],\n      rules: [],\n      seen_clients: [],\n      blocked_clients: [],\n      id: false,\n      username: false,\n      owner: false,\n      __v: 0,\n    },\n    logged_in: false,\n    servers: false,\n    config: \"pending\",\n    activeServer: false,\n    popular: {},\n    movie_lookup: {},\n    series_lookup: {},\n    season_lookup: {},\n    person_lookup: {},\n    search_results: {\n      movies: [],\n      series: [],\n      people: [],\n    },\n    actor_movie: {},\n    actor_series: {},\n    users: {},\n  },\n  action\n) {\n  switch (action.type) {\n    case types.POPULAR:\n      return {\n        ...state,\n        popular: action.popular,\n        updated: true,\n      };\n\n    case types.SEARCH:\n      return {\n        ...state,\n        search_results: {\n          movies: action.movies,\n          series: action.series,\n          people: action.people,\n        },\n      };\n\n    case types.MOVIE_LOOKUP:\n      let creditCache = {};\n      if (action.movie) {\n        if (action.movie.credits) {\n          Object.keys(action.movie.credits).forEach((key) => {\n            Object.keys(action.movie.credits[key]).forEach((skey) => {\n              creditCache[action.movie.credits[key][skey].id] = action.movie.credits[key][skey];\n            });\n          });\n        }\n      }\n\n      return {\n        ...state,\n        movie_lookup: {\n          ...state.movie_lookup,\n          [action.id]: action.movie,\n        },\n        actor_cache: {\n          creditCache,\n        },\n        updated: true,\n      };\n\n    case types.PERSON_LOOKUP:\n      return {\n        ...state,\n        person_lookup: {\n          ...state.movie_lookup,\n          [action.id]: action.person,\n        },\n        updated: true,\n      };\n\n    case types.SERIES_LOOKUP:\n      let creditCacheS = {};\n      if (action.series)\n        if (action.series.credits) {\n          Object.keys(action.series.credits).forEach((key) => {\n            Object.keys(action.series.credits[key]).forEach((skey) => {\n              creditCacheS[action.series.credits[key][skey].id] = action.series.credits[key][skey];\n            });\n          });\n        }\n\n      return {\n        ...state,\n        series_lookup: {\n          ...state.series_lookup,\n          [action.id]: action.series,\n        },\n        actor_cache: {\n          creditCacheS,\n        },\n        updated: true,\n      };\n\n    case types.SEASON_LOOKUP:\n      return {\n        ...state,\n        season_lookup: {\n          ...state.season_lookup,\n          [`${action.series}_s${action.season}`]: action.data,\n        },\n      };\n\n    case types.STORE_ACTOR_MOVIE:\n      return {\n        ...state,\n        actor_movie: {\n          ...state.actor_movie,\n          [action.id]: {\n            cast: action.cast,\n            crew: action.crew,\n          },\n        },\n        updated: true,\n      };\n\n    case types.STORE_ACTOR_SERIES:\n      return {\n        ...state,\n        actor_series: {\n          ...state.actor_series,\n          [action.id]: {\n            cast: action.cast,\n            crew: action.crew,\n          },\n        },\n        updated: true,\n      };\n\n    case types.GET_USER:\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          [action.id]: action.user,\n        },\n        updated: true,\n      };\n\n    case types.ALL_USERS:\n      return {\n        ...state,\n        users: action.users,\n        updated: true,\n      };\n\n    default:\n      return state;\n  }\n}\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/radarr.js",["211","212","213","214","215"],"import React from \"react\";\nimport Api from \"../../data/Api\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { ReactComponent as Add } from \"../../assets/svg/plus-circle.svg\";\nimport { ReactComponent as ServerIcon } from \"../../assets/svg/server.svg\";\n\nimport { ReactComponent as Spinner } from \"../../assets/svg/spinner.svg\";\nimport Modal from \"./modal\";\n\nclass Radarr extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      servers: false,\n      loading: true,\n      isError: false,\n      isMsg: false,\n      wizardOpen: false,\n      active: false,\n      title: \"\",\n      protocol: \"http\",\n      host: \"localhost\",\n      port: \"\",\n      profile: \"\",\n      profile_title: \"\",\n      path: \"\",\n      path_title: \"\",\n      active: false,\n      base: \"\",\n      apikey: \"\",\n      path: false,\n      profile: false,\n      activeServer: false,\n      uuid: false,\n    };\n\n    this.inputChange = this.inputChange.bind(this);\n    this.getRadarr = this.getRadarr.bind(this);\n    this.saveServer = this.saveServer.bind(this);\n    this.deleteServer = this.deleteServer.bind(this);\n    this.openWizard = this.openWizard.bind(this);\n    this.closeWizard = this.closeWizard.bind(this);\n    // this.test = this.test.bind(this);\n\n    this.closeMsg = false;\n  }\n\n  async saveServer() {\n    if (this.state.activeServer === false) {\n      console.log(\"error\");\n      return;\n    }\n    let servers = this.state.servers;\n\n    servers[this.state.activeServer] = {\n      active: this.state.active,\n      title: this.state.title,\n      protocol: this.state.protocol,\n      hostname: this.state.host,\n      apiKey: this.state.apikey,\n      port: this.state.port,\n      urlBase: this.state.base,\n      path: this.state.path,\n      path_title: this.state.path_title,\n      profile: this.state.profile,\n      profile_title: this.state.profile_title,\n      uuid: this.state.uuid,\n    };\n\n    console.log(servers);\n    // return;\n    await Api.saveRadarrConfig(servers);\n    this.getRadarr();\n    this.closeWizard();\n\n    this.setState({\n      isError: false,\n      isMsg: \"Radarr settings saved!\",\n    });\n\n    clearInterval(this.closeMsg);\n    this.closeMsg = setInterval(() => {\n      this.setState({\n        isError: false,\n        isMsg: false,\n      });\n    }, 3000);\n  }\n\n  async deleteServer() {\n    if (this.state.activeServer === false) {\n      console.log(\"error\");\n      return;\n    }\n\n    let servers = this.state.servers;\n\n    servers.splice(this.state.activeServer, 1);\n\n    console.log(servers);\n    // return;\n    await Api.saveRadarrConfig(servers);\n    this.getRadarr();\n    this.closeWizard();\n\n    this.setState({\n      isError: false,\n      isMsg: \"Radarr Server Removed\",\n    });\n\n    clearInterval(this.closeMsg);\n    this.closeMsg = setInterval(() => {\n      this.setState({\n        isError: false,\n        isMsg: false,\n      });\n    }, 3000);\n  }\n\n  async test(id) {\n    try {\n      let result = await Api.testRadarr(id);\n      if (result.connection) {\n        this.setState({\n          isError: false,\n          isMsg: \"Radarr Test Connection success!\",\n        });\n      } else {\n        this.setState({\n          isError: \"Radarr Test Connection failed!\",\n          isMsg: false,\n        });\n      }\n    } catch (err) {\n      this.setState({\n        isError: \"Radarr Test Connection failed! Error 2\",\n        isMsg: false,\n      });\n    }\n    clearInterval(this.closeMsg);\n    this.closeMsg = setInterval(() => {\n      this.setState({\n        isError: false,\n        isMsg: false,\n      });\n    }, 3000);\n  }\n\n  inputChange(e) {\n    const target = e.target;\n    const name = target.name;\n    let value = target.value;\n\n    if (target.type === \"checkbox\") {\n      value = target.checked;\n    }\n\n    console.log(target.type);\n\n    if (target.type === \"select-one\") {\n      let title = target.options[target.selectedIndex].text;\n      console.log(`${name}_title`);\n      this.setState({\n        [name]: value,\n        [`${name}_title`]: title,\n      });\n    } else {\n      this.setState({\n        [name]: value,\n      });\n    }\n  }\n\n  async getRadarr() {\n    this.setState({\n      loading: true,\n    });\n    try {\n      let radarr = await Api.radarrConfig();\n      this.setState({\n        servers: radarr,\n        loading: false,\n      });\n    } catch (err) {\n      console.log(err);\n      this.setState({\n        loading: false,\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.getRadarr();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.closeMsg);\n  }\n\n  openWizard(id) {\n    if (this.state.servers[id]) {\n      this.setState({\n        editWizardOpen: true,\n        activeServer: id,\n        active: this.state.servers[id].active ? this.state.servers[id].active : false,\n        title: this.state.servers[id].title,\n        protocol: this.state.servers[id].protocol,\n        host: this.state.servers[id].hostname,\n        port: this.state.servers[id].port,\n        base: this.state.servers[id].urlBase,\n        apikey: this.state.servers[id].apiKey,\n        active: this.state.servers[id].active,\n        profile: this.state.servers[id].profile,\n        profile_title: this.state.servers[id].profile_title,\n        path: this.state.servers[id].path,\n        path_title: this.state.servers[id].path_title,\n        uuid: this.state.servers[id].uuid,\n      });\n    } else {\n      this.setState({\n        wizardOpen: true,\n        activeServer: id,\n        uuid: uuidv4(),\n      });\n    }\n  }\n\n  closeWizard() {\n    this.setState({\n      active: false,\n      title: \"\",\n      protocol: \"http\",\n      host: \"localhost\",\n      port: null,\n      base: \"\",\n      apikey: \"\",\n      active: false,\n      profiles: false,\n      paths: false,\n      path: false,\n      profile: false,\n      wizardOpen: false,\n      editWizardOpen: false,\n      activeServer: false,\n      uuid: false,\n    });\n  }\n\n  render() {\n    let serverCount = 0;\n    if (this.state.loading) {\n      return (\n        <>\n          {this.state.isError ? (\n            <div className=\"setting-msg error\">\n              <p>{this.state.isError}</p>\n            </div>\n          ) : null}\n          {this.state.isMsg ? (\n            <div className=\"setting-msg good\">\n              <p>{this.state.isMsg}</p>\n            </div>\n          ) : null}\n          <div className=\"spinner--settings\">\n            <Spinner />\n          </div>\n        </>\n      );\n    }\n    return (\n      <>\n        {this.state.isError ? (\n          <div className=\"setting-msg error\">\n            <p>{this.state.isError}</p>\n          </div>\n        ) : null}\n        {this.state.isMsg ? (\n          <div className=\"setting-msg good\">\n            <p>{this.state.isMsg}</p>\n          </div>\n        ) : null}\n        {this.state.wizardOpen ? <Modal title=\"Add New Server\" edit={false} state={this.state} inputChange={this.inputChange} saveServer={this.saveServer} closeWizard={this.closeWizard} /> : null}\n        {this.state.editWizardOpen ? (\n          <Modal\n            title={`Edit ${this.state.title}`}\n            edit={true}\n            state={this.state}\n            inputChange={this.inputChange}\n            saveServer={this.saveServer}\n            closeWizard={this.closeWizard}\n            deleteServer={this.deleteServer}\n            type=\"radarr\"\n          />\n        ) : null}\n        <section>\n          <p className=\"main-title mb--2\">Radarr</p>\n          <p className=\"capped-width\">\n            Radarr is a movie collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new movies and will interface with clients and indexers to grab, sort, and\n            rename them. It can also be configured to automatically upgrade the quality of existing files in the library when a better quality format becomes available.\n          </p>\n        </section>\n        <section>\n          <p className=\"main-title mb--2\">Servers</p>\n          <div className=\"sr--grid\">\n            {this.state.servers.map((server, i) => {\n              serverCount++;\n              return (\n                <div className=\"sr--instance\">\n                  <div className=\"sr--instance--inner\">\n                    <ServerIcon />\n                    <p className=\"sr--title\">{server.title}</p>\n                    <p>{`${server.protocol}://${server.hostname}:${server.port}`}</p>\n                    <p>Status: {server.active ? \"Enabled\" : \"Disabled\"}</p>\n                    <p>Profile: {server.profile_title ? server.profile_title : \"Not set\"}</p>\n                    <p>Path: {server.path_title ? server.path_title : \"Not set\"}</p>\n                    <p className=\"small\">ID: {server.uuid ? server.uuid : \"Error\"}</p>\n                    <div className=\"btn-wrap\">\n                      <button className=\"btn\" onClick={() => this.openWizard(i)}>\n                        Edit\n                      </button>\n                      <button className=\"btn\" onClick={() => this.test(server.uuid)}>\n                        Test\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n            <div className=\"sr--instance sr--add-new\">\n              <div className=\"sr--instance--inner\" onClick={() => this.openWizard(serverCount)}>\n                <p className=\"sr--title\">Add new</p>\n                <Add />\n              </div>\n            </div>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default Radarr;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/general.js",["216"],"import React from 'react';\nimport Api from '../../data/Api';\n\nimport { ReactComponent as Spinner } from '../../assets/svg/spinner.svg';\n\nclass General extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\temail_user: '',\n\t\t\temail_pass: '',\n\t\t\temail_server: '',\n\t\t\temail_port: '',\n\t\t\temail_secure: false,\n\t\t\temail_enabled: false,\n\t\t};\n\n\t\tthis.inputChange = this.inputChange.bind(this);\n\t\tthis.closeMsg = false;\n\t\tthis.saveEmail = this.saveEmail.bind(this);\n\t\tthis.loadConfigs = this.loadConfigs.bind(this);\n\t\tthis.testEmail = this.testEmail.bind(this);\n\t}\n\n\tinputChange(e) {\n\t\tconst target = e.target;\n\t\tconst name = target.name;\n\t\tlet value = target.value;\n\n\t\tif (target.type === 'checkbox') {\n\t\t\tvalue = target.checked;\n\t\t}\n\n\t\tthis.setState({\n\t\t\t[name]: value,\n\t\t});\n\t}\n\n\tasync saveEmail() {\n\t\tawait Api.saveEmailConfig({\n\t\t\tuser: this.state.email_user,\n\t\t\tpass: this.state.email_pass,\n\t\t\tserver: this.state.email_server,\n\t\t\tport: this.state.email_port,\n\t\t\tsecure: this.state.email_secure,\n\t\t\tenabled: this.state.email_enabled,\n\t\t});\n\n\t\tthis.setState({\n\t\t\tisError: false,\n\t\t\tisMsg: 'Email settings saved!',\n\t\t});\n\t\tclearInterval(this.closeMsg);\n\t\tthis.closeMsg = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tisError: false,\n\t\t\t\tisMsg: false,\n\t\t\t});\n\t\t}, 3000);\n\t}\n\n\tasync loadConfigs() {\n\t\ttry {\n\t\t\tlet email = await Api.getEmailConfig();\n\t\t\tthis.setState({\n\t\t\t\temail_enabled: email.config.emailEnabled,\n\t\t\t\temail_user: email.config.emailUser,\n\t\t\t\temail_pass: email.config.emailPass,\n\t\t\t\temail_server: email.config.emailServer,\n\t\t\t\temail_port: email.config.emailPort,\n\t\t\t\temail_secure: email.config.emailSecure,\n\t\t\t\tloading: false,\n\t\t\t\tisError: false,\n\t\t\t\tisMsg: 'Email config loaded',\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthis.setState({\n\t\t\t\tloading: false,\n\t\t\t\tisError: 'Error getting email config',\n\t\t\t});\n\t\t}\n\t\tclearInterval(this.closeMsg);\n\t\tthis.closeMsg = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tisError: false,\n\t\t\t\tisMsg: false,\n\t\t\t});\n\t\t}, 3000);\n\t}\n\n\tasync testEmail() {\n\t\ttry {\n\t\t\tawait this.saveEmail();\n\t\t\tlet test = await Api.testEmail();\n\t\t\tconsole.log(test);\n\t\t\tif (test.result) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisMsg: 'Email test passed',\n\t\t\t\t\tisError: false,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisMsg: false,\n\t\t\t\t\tisError: 'Email test Failed',\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthis.setState({\n\t\t\t\tisMsg: false,\n\t\t\t\tisError: 'Email test Failed',\n\t\t\t});\n\t\t}\n\t\tclearInterval(this.closeMsg);\n\t\tthis.closeMsg = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tisError: false,\n\t\t\t\tisMsg: false,\n\t\t\t});\n\t\t}, 3000);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadConfigs();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.closeMsg);\n\t}\n\n\trender() {\n\t\tif (this.state.loading) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{this.state.isError ? (\n\t\t\t\t\t\t<div className=\"setting-msg error\">\n\t\t\t\t\t\t\t<p>{this.state.isError}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{this.state.isMsg ? (\n\t\t\t\t\t\t<div className=\"setting-msg good\">\n\t\t\t\t\t\t\t<p>{this.state.isMsg}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<div className=\"spinner--settings\">\n\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{this.state.isError ? (\n\t\t\t\t\t<div className=\"setting-msg error\">\n\t\t\t\t\t\t<p>{this.state.isError}</p>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t\t{this.state.isMsg ? (\n\t\t\t\t\t<div className=\"setting-msg good\">\n\t\t\t\t\t\t<p>{this.state.isMsg}</p>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t\t<section>\n\t\t\t\t\t<p className=\"main-title\">General</p>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<p className=\"main-title mb--2\">Plex</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tIf connection has been lost to Plex re-authenticate\n\t\t\t\t\t\there.\n\t\t\t\t\t</p>\n\t\t\t\t\t<button className=\"btn\">Login with plex</button>\n\t\t\t\t\t<button className=\"btn\" style={{ marginLeft: '10px' }}>\n\t\t\t\t\t\tTest\n\t\t\t\t\t</button>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<p className=\"main-title mb--2\">Email</p>\n\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"email_user\"\n\t\t\t\t\t\tvalue={this.state.email_user}\n\t\t\t\t\t\tonChange={this.inputChange}\n\t\t\t\t\t\tautoComplete=\"new-password\"\n\t\t\t\t\t\tautoCorrect=\"off\"\n\t\t\t\t\t\tspellCheck=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tname=\"email_pass\"\n\t\t\t\t\t\tvalue={this.state.email_pass}\n\t\t\t\t\t\tonChange={this.inputChange}\n\t\t\t\t\t\tautoComplete=\"new-password\"\n\t\t\t\t\t\tautoCorrect=\"off\"\n\t\t\t\t\t\tspellCheck=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t<label>SMTP Server</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"email_server\"\n\t\t\t\t\t\tvalue={this.state.email_server}\n\t\t\t\t\t\tonChange={this.inputChange}\n\t\t\t\t\t\tautoComplete=\"new-password\"\n\t\t\t\t\t\tautoCorrect=\"off\"\n\t\t\t\t\t\tspellCheck=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t<label>Port</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tname=\"email_port\"\n\t\t\t\t\t\tvalue={this.state.email_port}\n\t\t\t\t\t\tonChange={this.inputChange}\n\t\t\t\t\t\tautoComplete=\"new-password\"\n\t\t\t\t\t\tautoCorrect=\"off\"\n\t\t\t\t\t\tspellCheck=\"off\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"checkbox-wrap mb--2\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tname=\"email_secure\"\n\t\t\t\t\t\t\tchecked={this.state.email_secure}\n\t\t\t\t\t\t\tonChange={this.inputChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tUse Secure{' '}\n\t\t\t\t\t\t\t<small>(For port 587 or 25 use false)</small>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"checkbox-wrap mb--2\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tname=\"email_enabled\"\n\t\t\t\t\t\t\tchecked={this.state.email_enabled}\n\t\t\t\t\t\t\tonChange={this.inputChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p>Enabled</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tUsing Gmail? Make sure to allow \"less secure apps\" to\n\t\t\t\t\t\tallow Petio to send emails on your behalf. You can\n\t\t\t\t\t\tchange this setting{' '}\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\thref=\"https://www.google.com/settings/security/lesssecureapps\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\there\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\n\t\t\t\t\t\tonClick={this.saveEmail}\n\t\t\t\t\t>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button className=\"btn\" onClick={this.testEmail}>\n\t\t\t\t\t\tTest\n\t\t\t\t\t</button>\n\t\t\t\t</section>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default General;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/sonarr.js",["217","218","219","220","221"],"import React from \"react\";\nimport Api from \"../../data/Api\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { ReactComponent as Add } from \"../../assets/svg/plus-circle.svg\";\nimport { ReactComponent as ServerIcon } from \"../../assets/svg/server.svg\";\n\nimport { ReactComponent as Spinner } from \"../../assets/svg/spinner.svg\";\nimport Modal from \"./modal\";\n\nclass Sonarr extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      servers: false,\n      loading: true,\n      isError: false,\n      isMsg: false,\n      wizardOpen: false,\n      active: false,\n      title: \"\",\n      protocol: \"http\",\n      host: \"localhost\",\n      port: \"\",\n      profile: \"\",\n      profile_title: \"\",\n      path: \"\",\n      path_title: \"\",\n      active: false,\n      base: \"\",\n      apikey: \"\",\n      path: false,\n      profile: false,\n      activeServer: false,\n      uuid: false,\n    };\n\n    this.inputChange = this.inputChange.bind(this);\n    this.getSonarr = this.getSonarr.bind(this);\n    this.saveServer = this.saveServer.bind(this);\n    this.deleteServer = this.deleteServer.bind(this);\n    this.openWizard = this.openWizard.bind(this);\n    this.closeWizard = this.closeWizard.bind(this);\n    // this.test = this.test.bind(this);\n\n    this.closeMsg = false;\n  }\n\n  async saveServer() {\n    if (this.state.activeServer === false) {\n      console.log(\"error\");\n      return;\n    }\n    let servers = this.state.servers;\n\n    servers[this.state.activeServer] = {\n      active: this.state.active,\n      title: this.state.title,\n      protocol: this.state.protocol,\n      hostname: this.state.host,\n      apiKey: this.state.apikey,\n      port: this.state.port,\n      urlBase: this.state.base,\n      path: this.state.path,\n      path_title: this.state.path_title,\n      profile: this.state.profile,\n      profile_title: this.state.profile_title,\n      uuid: this.state.uuid,\n    };\n\n    console.log(servers);\n    // return;\n    await Api.saveSonarrConfig(servers);\n    this.getSonarr();\n    this.closeWizard();\n\n    this.setState({\n      isError: false,\n      isMsg: \"Sonarr settings saved!\",\n    });\n\n    clearInterval(this.closeMsg);\n    this.closeMsg = setInterval(() => {\n      this.setState({\n        isError: false,\n        isMsg: false,\n      });\n    }, 3000);\n  }\n\n  async deleteServer() {\n    if (this.state.activeServer === false) {\n      console.log(\"error\");\n      return;\n    }\n\n    let servers = this.state.servers;\n\n    servers.splice(this.state.activeServer, 1);\n\n    console.log(servers);\n    // return;\n    await Api.saveSonarrConfig(servers);\n    this.getSonarr();\n    this.closeWizard();\n\n    this.setState({\n      isError: false,\n      isMsg: \"Sonarr Server Removed\",\n    });\n\n    clearInterval(this.closeMsg);\n    this.closeMsg = setInterval(() => {\n      this.setState({\n        isError: false,\n        isMsg: false,\n      });\n    }, 3000);\n  }\n\n  async test(id) {\n    try {\n      let result = await Api.testSonarr(id);\n      if (result.connection) {\n        this.setState({\n          isError: false,\n          isMsg: \"Sonarr Test Connection success!\",\n        });\n      } else {\n        this.setState({\n          isError: \"Sonarr Test Connection failed!\",\n          isMsg: false,\n        });\n      }\n    } catch (err) {\n      this.setState({\n        isError: \"Sonarr Test Connection failed! Error 2\",\n        isMsg: false,\n      });\n    }\n    clearInterval(this.closeMsg);\n    this.closeMsg = setInterval(() => {\n      this.setState({\n        isError: false,\n        isMsg: false,\n      });\n    }, 3000);\n  }\n\n  inputChange(e) {\n    const target = e.target;\n    const name = target.name;\n    let value = target.value;\n\n    if (target.type === \"checkbox\") {\n      value = target.checked;\n    }\n\n    console.log(target.type);\n\n    if (target.type === \"select-one\") {\n      let title = target.options[target.selectedIndex].text;\n      console.log(`${name}_title`);\n      this.setState({\n        [name]: value,\n        [`${name}_title`]: title,\n      });\n    } else {\n      this.setState({\n        [name]: value,\n      });\n    }\n  }\n\n  async getSonarr() {\n    this.setState({\n      loading: true,\n    });\n    try {\n      let sonarr = await Api.sonarrConfig();\n      this.setState({\n        servers: sonarr,\n        loading: false,\n      });\n    } catch (err) {\n      console.log(err);\n      this.setState({\n        loading: false,\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.getSonarr();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.closeMsg);\n  }\n\n  openWizard(id) {\n    if (this.state.servers[id]) {\n      this.setState({\n        editWizardOpen: true,\n        activeServer: id,\n        active: this.state.servers[id].active ? this.state.servers[id].active : false,\n        title: this.state.servers[id].title,\n        protocol: this.state.servers[id].protocol,\n        host: this.state.servers[id].hostname,\n        port: this.state.servers[id].port,\n        base: this.state.servers[id].urlBase,\n        apikey: this.state.servers[id].apiKey,\n        active: this.state.servers[id].active,\n        profile: this.state.servers[id].profile,\n        profile_title: this.state.servers[id].profile_title,\n        path: this.state.servers[id].path,\n        path_title: this.state.servers[id].path_title,\n        uuid: this.state.servers[id].uuid,\n      });\n    } else {\n      this.setState({\n        wizardOpen: true,\n        activeServer: id,\n        uuid: uuidv4(),\n      });\n    }\n  }\n\n  closeWizard() {\n    this.setState({\n      active: false,\n      title: \"\",\n      protocol: \"http\",\n      host: \"localhost\",\n      port: null,\n      base: \"\",\n      apikey: \"\",\n      active: false,\n      profiles: false,\n      paths: false,\n      path: false,\n      profile: false,\n      wizardOpen: false,\n      editWizardOpen: false,\n      activeServer: false,\n      uuid: false,\n    });\n  }\n\n  render() {\n    let serverCount = 0;\n    if (this.state.loading) {\n      return (\n        <>\n          {this.state.isError ? (\n            <div className=\"setting-msg error\">\n              <p>{this.state.isError}</p>\n            </div>\n          ) : null}\n          {this.state.isMsg ? (\n            <div className=\"setting-msg good\">\n              <p>{this.state.isMsg}</p>\n            </div>\n          ) : null}\n          <div className=\"spinner--settings\">\n            <Spinner />\n          </div>\n        </>\n      );\n    }\n    return (\n      <>\n        {this.state.isError ? (\n          <div className=\"setting-msg error\">\n            <p>{this.state.isError}</p>\n          </div>\n        ) : null}\n        {this.state.isMsg ? (\n          <div className=\"setting-msg good\">\n            <p>{this.state.isMsg}</p>\n          </div>\n        ) : null}\n        {this.state.wizardOpen ? <Modal title=\"Add New Server\" edit={false} state={this.state} inputChange={this.inputChange} saveServer={this.saveServer} closeWizard={this.closeWizard} /> : null}\n        {this.state.editWizardOpen ? (\n          <Modal\n            title={`Edit ${this.state.title}`}\n            edit={true}\n            state={this.state}\n            inputChange={this.inputChange}\n            saveServer={this.saveServer}\n            closeWizard={this.closeWizard}\n            deleteServer={this.deleteServer}\n          />\n        ) : null}\n        <section>\n          <p className=\"main-title mb--2\">Sonarr</p>\n          <p className=\"capped-width\">\n            Sonarr is a PVR for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to\n            automatically upgrade the quality of files already downloaded when a better quality format becomes available.\n          </p>\n        </section>\n        <section>\n          <p className=\"main-title mb--2\">Servers</p>\n          <div className=\"sr--grid\">\n            {this.state.servers.map((server, i) => {\n              serverCount++;\n              return (\n                <div className=\"sr--instance\">\n                  <div className=\"sr--instance--inner\">\n                    <ServerIcon />\n                    <p className=\"sr--title\">{server.title}</p>\n                    <p>{`${server.protocol}://${server.hostname}:${server.port}`}</p>\n                    <p>Status: {server.active ? \"Enabled\" : \"Disabled\"}</p>\n                    <p>Profile: {server.profile_title ? server.profile_title : \"Not set\"}</p>\n                    <p>Path: {server.path_title ? server.path_title : \"Not set\"}</p>\n                    <p className=\"small\">ID: {server.uuid ? server.uuid : \"Error\"}</p>\n                    <div className=\"btn-wrap\">\n                      <button className=\"btn\" onClick={() => this.openWizard(i)}>\n                        Edit\n                      </button>\n                      <button className=\"btn\" onClick={() => this.test(server.uuid)}>\n                        Test\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n            <div className=\"sr--instance sr--add-new\">\n              <div className=\"sr--instance--inner\" onClick={() => this.openWizard(serverCount)}>\n                <p className=\"sr--title\">Add new</p>\n                <Add />\n              </div>\n            </div>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default Sonarr;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Api/actions.js",["222","223"],"import { store } from \"../store\";\nimport * as types from \"../actionTypes\";\nimport * as api from \"./api\";\nimport Api from \".\";\n\nfunction finalise(data = false) {\n  if (!data) return false;\n  return store.dispatch(data);\n}\n\nexport async function getPopular() {\n  let popular = await api.popular();\n\n  if (popular) {\n    popular.movies.forEach((movie) => {\n      movie.isMinified = true;\n      finalise({\n        type: types.MOVIE_LOOKUP,\n        movie: movie,\n        id: movie.id,\n      });\n    });\n\n    popular.tv.forEach((series) => {\n      series.isMinified = true;\n      finalise({\n        type: types.SERIES_LOOKUP,\n        series: series,\n        id: series.id,\n      });\n    });\n\n    finalise({\n      type: types.POPULAR,\n      popular: {\n        movies: popular.movies,\n        tv: popular.tv,\n        people: popular.people,\n      },\n    });\n  }\n}\n\nexport async function movie(id, minified = false) {\n  let movie = await api.movie(id, minified);\n\n  movie.isMinified = minified;\n\n  finalise({\n    type: types.MOVIE_LOOKUP,\n    movie: movie,\n    id: id,\n  });\n}\n\nexport async function series(id, minified = false) {\n  let series = await api.series(id, minified);\n\n  if (!series.id) {\n    return false;\n  }\n\n  series.isMinified = minified;\n\n  finalise({\n    type: types.SERIES_LOOKUP,\n    series: series,\n    id: id,\n  });\n}\n\nexport async function person(id) {\n  let data = await api.actor(id);\n\n  let movies = data.movies;\n  let shows = data.tv;\n  let info = data.info;\n\n  finalise({\n    type: types.PERSON_LOOKUP,\n    person: info,\n    id: id,\n  });\n\n  if (movies.length === 0) {\n    finalise({\n      type: types.STORE_ACTOR_MOVIE,\n      cast: {},\n      crew: {},\n      id: id,\n    });\n  } else {\n    finalise({\n      type: types.STORE_ACTOR_MOVIE,\n      cast: movies.cast,\n      crew: movies.crew,\n      id: id,\n    });\n  }\n  if (shows.length === 0) {\n    finalise({\n      type: types.STORE_ACTOR_SERIES,\n      cast: {},\n      crew: {},\n      id: id,\n    });\n  } else {\n    finalise({\n      type: types.STORE_ACTOR_SERIES,\n      cast: shows.cast,\n      crew: shows.crew,\n      id: id,\n    });\n  }\n}\n\nexport async function search(term) {\n  let searchResults = await api.search(term);\n\n  return new Promise((resolve, reject) => {\n    if (!searchResults) {\n      reject();\n    }\n    searchResults.movies.forEach((movie) => {\n      movie.isMinified = true;\n      finalise({\n        type: types.MOVIE_LOOKUP,\n        movie: movie,\n        id: movie.id,\n      });\n    });\n\n    searchResults.shows.forEach((series) => {\n      // console.log(series);\n      series.isMinified = true;\n      finalise({\n        type: types.SERIES_LOOKUP,\n        series: series,\n        id: series.id,\n      });\n    });\n\n    finalise({\n      type: types.SEARCH,\n      movies: searchResults.movies,\n      series: searchResults.shows,\n      people: searchResults.people,\n    });\n\n    resolve();\n  });\n}\n\nexport function clearSearch() {\n  finalise({\n    type: types.SEARCH,\n    movies: [],\n    series: [],\n    people: [],\n  });\n}\n\nexport let top = (type) => {\n  return new Promise((resolve, reject) => {\n    api\n      .top(type)\n      .then((data) => {\n        const sorted = Object.values(data)\n          .sort((a, b) => a.globalViewCount - b.globalViewCount)\n          .reverse();\n\n        resolve(sorted);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject(\"Error getting plex movies\");\n      });\n  });\n};\n\nexport async function history(user_id, type) {\n  return new Promise((resolve, reject) => {\n    api\n      .history(user_id, type)\n      .then((data) => {\n        resolve(data);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject(\"Error getting plex movies\");\n      });\n  });\n}\n\nexport let get_plex_media = (id, type) => {\n  return new Promise((resolve, reject) => {\n    api\n      .get_plex_media(id, type)\n      .then((res) => {\n        resolve(res);\n\n        if (type === \"movie\") {\n          finalise({\n            type: types.MOVIE_LOOKUP,\n            movie: movie,\n            id: movie.id,\n          });\n        } else {\n          finalise({\n            type: types.SERIES_LOOKUP,\n            movie: series,\n            id: series.id,\n          });\n        }\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nexport let bandwidth = () => {\n  return new Promise((resolve, reject) => {\n    api\n      .getBandwidth()\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nexport let serverInfo = () => {\n  return new Promise((resolve, reject) => {\n    api\n      .getServerInfo()\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nexport let currentSessions = () => {\n  return new Promise((resolve, reject) => {\n    api\n      .getCurrentSessions()\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nexport function checkConfig() {\n  return new Promise((resolve, reject) => {\n    api\n      .checkConfig()\n      .then((data) => {\n        resolve(data);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport function saveConfig(config) {\n  return new Promise((resolve, reject) => {\n    api\n      .saveConfig(config)\n      .then(() => {\n        resolve();\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport async function sonarrConfig() {\n  let config = await api.sonarrConfig();\n\n  return config;\n}\n\nexport async function sonarrOptions(id) {\n  let paths = await api.sonarrPaths(id);\n  let profiles = await api.sonarrProfiles(id);\n\n  return {\n    paths: paths,\n    profiles: profiles,\n  };\n}\n\nexport async function radarrConfig() {\n  let config = await api.radarrConfig();\n\n  return config;\n}\n\nexport async function radarrOptions(id) {\n  let paths = await api.radarrPaths(id);\n  let profiles = await api.radarrProfiles(id);\n\n  return {\n    paths: paths,\n    profiles: profiles,\n  };\n}\n\nexport function saveSonarrConfig(config) {\n  return new Promise((resolve, reject) => {\n    api\n      .saveSonarrConfig({ data: JSON.stringify(config) })\n      .then(() => {\n        resolve();\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport function testSonarr(id) {\n  return new Promise((resolve, reject) => {\n    api\n      .testSonarr(id)\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport function testRadarr(id) {\n  return new Promise((resolve, reject) => {\n    api\n      .testRadarr(id)\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport function saveRadarrConfig(config) {\n  return new Promise((resolve, reject) => {\n    api\n      .saveRadarrConfig({ data: JSON.stringify(config) })\n      .then(() => {\n        resolve();\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport function saveEmailConfig(config) {\n  return new Promise((resolve, reject) => {\n    api\n      .saveEmailConfig(config)\n      .then(() => {\n        resolve();\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport function getEmailConfig() {\n  return new Promise((resolve, reject) => {\n    api\n      .getEmailConfig()\n      .then((data) => {\n        resolve(data);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport function testEmail() {\n  return new Promise((resolve, reject) => {\n    api\n      .testEmail()\n      .then((data) => {\n        resolve(data);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n\nexport async function getUser(id) {\n  try {\n    let userData = await api.getUser(id);\n    finalise({\n      type: types.GET_USER,\n      user: userData,\n      id: userData.id,\n    });\n  } catch (err) {\n    finalise({\n      type: types.GET_USER,\n      user: {\n        email: \"User Not Found\",\n        recommendationsPlaylistId: false,\n        thumb: false,\n        title: \"User Not Found\",\n        username: \"User Not Found\",\n        __v: false,\n        id: false,\n      },\n      id: id,\n    });\n  }\n}\n\nexport async function allUsers() {\n  try {\n    let userData = await api.allUsers();\n    let data = {};\n    userData.map((user) => {\n      data[user.id] = user;\n    });\n    finalise({\n      type: types.ALL_USERS,\n      users: data,\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport async function testMongo(mongo) {\n  try {\n    let result = await api.testMongo(mongo);\n    return result.status;\n  } catch (err) {\n    console.log(err);\n    return \"failed\";\n  }\n}\n\nexport function getIssues() {\n  return new Promise((resolve, reject) => {\n    api\n      .getIssues()\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((err) => {\n        console.log(err);\n        reject();\n      });\n  });\n}\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/index.js",["224"],"import { login, logout, getRequests } from './actions';\n\nexport default {\n\tlogin,\n\tlogout,\n\tgetRequests,\n};\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/index.js",["225"],"import { plexAuth } from './actions';\n\nexport default {\n\tplexAuth,\n};\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/SessionMedia.js",["226","227","228","229","230"],"import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Api from '../data/Api';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\nimport MovieCard from './MovieCard';\nimport TvCard from './TvCard';\nimport { ReactComponent as PlayIcon } from '../assets/svg/play.svg';\nimport { ReactComponent as PauseIcon } from '../assets/svg/pause.svg';\nimport { ReactComponent as BufferIcon } from '../assets/svg/buffer.svg';\n\nclass SessionMedia extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tid: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tif (!this.props.live && this.props.type !== 'clip') {\n\t\t\tif (this.props.type === 'movie') {\n\t\t\t\tthis.getMovie();\n\t\t\t} else {\n\t\t\t\tthis.getSeries();\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (!this.props.live && !this.state.id && this.props.type !== 'clip') {\n\t\t\tif (this.props.type === 'movie') {\n\t\t\t\tthis.getMovie();\n\t\t\t} else {\n\t\t\t\tthis.getSeries();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetMovie() {\n\t\tApi.get_plex_media(this.props.id, 'movie').then((res) => {\n\t\t\tthis.setState({\n\t\t\t\tid: res.tmdb_id,\n\t\t\t});\n\t\t});\n\t}\n\n\tgetSeries() {\n\t\tApi.get_plex_media(this.props.id, 'tv').then((res) => {\n\t\t\tthis.setState({\n\t\t\t\tid: res.tmdb_id,\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\tlet card = null;\n\t\tif (!this.state.id && !this.props.live && this.props.type !== 'clip') {\n\t\t\treturn null;\n\t\t}\n\t\tif (\n\t\t\tthis.props.live ||\n\t\t\tthis.props.type === 'clip' ||\n\t\t\tthis.props.type === 'trailer' ||\n\t\t\tthis.state.id === 'false'\n\t\t) {\n\t\t\tlet playbackState;\n\t\t\tswitch (this.props.playbackState) {\n\t\t\t\tcase 'playing':\n\t\t\t\tcase 'streaming':\n\t\t\t\t\tplaybackState = <PlayIcon />;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'paused':\n\t\t\t\t\tplaybackState = <PauseIcon />;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffering':\n\t\t\t\t\tplaybackState = <BufferIcon />;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tplaybackState = <p>{this.props.playbackState}</p>;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcard = (\n\t\t\t\t<div className=\"card type--generic\" key={this.props.uid}>\n\t\t\t\t\t<div className=\"card--inner\"></div>\n\t\t\t\t\t<div className=\"image-wrap\">\n\t\t\t\t\t\t{this.props.progress ? (\n\t\t\t\t\t\t\t<div className=\"session--duration\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"session--prog\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tmaxWidth: this.props.progress + '%',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t<div className=\"playback-status\">{playbackState}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else if (this.props.type === 'movie') {\n\t\t\tcard = (\n\t\t\t\t<MovieCard\n\t\t\t\t\tkey={this.props.uid}\n\t\t\t\t\tmovie={{\n\t\t\t\t\t\tid: this.state.id,\n\t\t\t\t\t}}\n\t\t\t\t\tprogress={this.props.progress}\n\t\t\t\t\tplaybackState={this.props.playbackState}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else {\n\t\t\tcard = (\n\t\t\t\t<TvCard\n\t\t\t\t\tkey={this.props.uid}\n\t\t\t\t\tseries={{\n\t\t\t\t\t\tid: this.state.id,\n\t\t\t\t\t}}\n\t\t\t\t\tprogress={this.props.progress}\n\t\t\t\t\tplaybackState={this.props.playbackState}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"session--media\">\n\t\t\t\t<div className=\"session--media--inner\">\n\t\t\t\t\t<div className=\"session--user\">\n\t\t\t\t\t\t<img src={this.props.userThumb} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{card}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SessionMedia;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/data/actionTypes.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/data/User/actions.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/data/Plex/actions.js",["231"],"import { store } from \"../store\";\nimport * as types from \"../actionTypes\";\nimport * as api from \"./api\";\nimport { testServer } from \"../Api/api\";\n\n// Credit Tautulli\nconst plex_oauth_loader =\n  \"<style>\" +\n  \".login-loader-container {\" +\n  'font-family: \"Open Sans\", Arial, sans-serif;' +\n  \"position: absolute;\" +\n  \"top: 0;\" +\n  \"right: 0;\" +\n  \"bottom: 0;\" +\n  \"left: 0;\" +\n  \"}\" +\n  \".login-loader-message {\" +\n  \"color: #282A2D;\" +\n  \"text-align: center;\" +\n  \"position: absolute;\" +\n  \"left: 50%;\" +\n  \"top: 25%;\" +\n  \"transform: translate(-50%, -50%);\" +\n  \"}\" +\n  \".login-loader {\" +\n  \"border: 5px solid #ccc;\" +\n  \"-webkit-animation: spin 1s linear infinite;\" +\n  \"animation: spin 1s linear infinite;\" +\n  \"border-top: 5px solid #282A2D;\" +\n  \"border-radius: 50%;\" +\n  \"width: 50px;\" +\n  \"height: 50px;\" +\n  \"position: relative;\" +\n  \"left: calc(50% - 25px);\" +\n  \"}\" +\n  \"@keyframes spin {\" +\n  \"0% { transform: rotate(0deg); }\" +\n  \"100% { transform: rotate(360deg); }\" +\n  \"}\" +\n  \"</style>\" +\n  '<div class=\"login-loader-container\">' +\n  '<div class=\"login-loader-message\">' +\n  '<div class=\"login-loader\"></div>' +\n  \"<br>\" +\n  \"Redirecting to the Plex login page...\" +\n  \"</div>\" +\n  \"</div>\";\n\nexport function plexAuth(plexWindow) {\n  plexWindow.document.body.innerHTML = plex_oauth_loader;\n  api\n    .getPins()\n    .then((response) => response.json())\n    .then((res) => {\n      plexWindow.location.href = `https://app.plex.tv/auth/#!?clientID=067e602b-1e86-4739-900d-1abdf8f6da71&code=${res.code}`;\n\n      waitForPin(plexWindow, res.id);\n    })\n    .catch(() => {\n      alert(\"Unable to open popout window, please make sure to allow pop-ups!\");\n    });\n}\n\nfunction saveToken(token) {\n  finalise({\n    type: types.PLEX_TOKEN,\n    token: token,\n  });\n}\n\nasync function waitForPin(plexWindow, id) {\n  let response = await api.validatePin(id);\n  if (response.authToken) {\n    plexWindow.close();\n    saveToken(response.authToken);\n    getUser(response.authToken);\n  } else if (plexWindow.closed) {\n    alert(\"Unable to login please try again\");\n  } else {\n    setTimeout(() => {\n      waitForPin(plexWindow, id);\n    }, 1000);\n  }\n}\n\nasync function getUser(token) {\n  let setup = {\n    user: {},\n    servers: {},\n  };\n  let user = await api.getUser(token);\n  let servers = await api.getServers(token);\n  let serverList = servers.getElementsByTagName(\"MediaContainer\")[0].getElementsByTagName(\"Device\");\n  let userData = user.getElementsByTagName(\"user\")[0];\n  setup.user.email = userData.getAttribute(\"email\");\n  setup.user.id = userData.getAttribute(\"id\");\n  setup.user.username = userData.getAttribute(\"title\");\n  setup.user.thumb = userData.getAttribute(\"thumb\");\n  for (let server of serverList) {\n    if (server.getAttribute(\"owned\") === \"1\" && server.getAttribute(\"provides\") === \"server\") {\n      let connections = server.getElementsByTagName(\"Connection\");\n      let i = 0;\n      for (let connection of connections) {\n        console.log(connection);\n        // if (connection.getAttribute('local') === '0')\n        setup.servers[server.getAttribute(\"clientIdentifier\") + i] = {\n          name: server.getAttribute(\"name\"),\n          host: connection.getAttribute(\"address\"),\n          port: connection.getAttribute(\"port\"),\n          protocol: connection.getAttribute(\"protocol\"),\n          platform: server.getAttribute(\"platform\"),\n          status: \"pending\",\n        };\n        i++;\n      }\n    }\n  }\n  setup.servers[\"plex_docker\"] = {\n    name: \"Docker\",\n    host: \"plex\",\n    port: \"32400\",\n    protocol: \"http\",\n    platform: \"docker\",\n    status: \"pending\",\n  };\n  finalise({\n    type: types.PLEX_DETAILS,\n    servers: setup.servers,\n    user: setup.user,\n  });\n\n  testPlexServers(setup.servers, token);\n}\n\nfunction testPlexServers(servers, token) {\n  Object.keys(servers).map((key) => {\n    let server = servers[key];\n    server.token = token;\n    testPlexServer(server, key);\n  });\n}\n\nasync function testPlexServer(server, key) {\n  try {\n    let test = await testServer(server);\n    console.log(test);\n    server.status = test.status;\n    finalise({\n      type: types.PLEX_SERVER,\n      key: key,\n      server: server,\n    });\n  } catch {\n    server.status = \"failed\";\n    finalise({\n      type: types.PLEX_SERVER,\n      key: key,\n      server: server,\n    });\n  }\n}\n\nfunction finalise(data = false) {\n  if (!data) return false;\n  return store.dispatch(data);\n}\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/MovieCard.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/components/TvCard.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Requests.js",["232"],"import React from \"react\";\nimport Api from \"../data/Api\";\nimport User from \"../data/User\";\nimport { ReactComponent as Spinner } from \"../assets/svg/spinner.svg\";\nimport RequestsTable from \"../components/RequestsTable\";\n\nclass Requests extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      requests: this.props.user.requests,\n      pending: false,\n      users: {},\n    };\n\n    this.getRequests = this.getRequests.bind(this);\n  }\n\n  componentDidMount() {\n    this.getRequests(true);\n    this.heartbeat = setInterval(() => this.getRequests(true), 30000);\n\n    let page = document.querySelectorAll(\".page-wrap\")[0];\n    page.scrollTop = 0;\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate() {\n    if (this.props.user.requests !== this.state.requests) {\n      this.setState({\n        requests: this.props.user.requests,\n      });\n    }\n    if (Object.keys(this.state.requests).length > 0)\n      Object.keys(this.state.requests).map((key) => {\n        let req = this.state.requests[key];\n        for (let i = 0; i < req.users.length; i++) {\n          if (!this.props.api.users[req.users[i]]) {\n            console.log(req.users[i]);\n            Api.getUser(req.users[i]);\n          }\n        }\n      });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.heartbeat);\n  }\n\n  getRequests(live = false) {\n    if (!this.state.requests || live) {\n      User.getRequests();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"requests--wrap\">\n        {this.state.pending ? (\n          <div className=\"spinner--requests\">\n            <Spinner />\n          </div>\n        ) : (\n          <>\n            <section>\n              <p className=\"main-title\">Requests</p>\n            </section>\n            <section>\n              <RequestsTable requests={this.state.requests} api={this.props.api} />\n            </section>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Requests;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/components/RequestsTable.js",["233","234","235"],"import React from \"react\";\nimport { ReactComponent as MovieIcon } from \"../assets/svg/movie.svg\";\nimport { ReactComponent as TvIcon } from \"../assets/svg/tv.svg\";\n\nclass RequestsTable extends React.Component {\n  getUsername(id) {\n    if (!this.props.api.users) {\n      return null;\n    } else if (id in this.props.api.users) {\n      return this.props.api.users[id].title;\n    } else {\n      return null;\n    }\n  }\n\n  typeIcon(type) {\n    let icon = null;\n    switch (type) {\n      case \"movie\":\n        icon = <MovieIcon />;\n        break;\n      case \"tv\":\n        icon = <TvIcon />;\n        break;\n      default:\n        icon = null;\n    }\n\n    return <span className=\"requests--icon\">{icon}</span>;\n  }\n\n  calcDate(diff) {\n    var day = 1000 * 60 * 60 * 24;\n\n    var days = Math.ceil(diff / day);\n    var months = Math.floor(days / 31);\n    var years = Math.floor(months / 12);\n    days = days - months * 31;\n    months = months - years * 12;\n\n    var message = \"\";\n    message += years ? years + \" yr \" : \"\";\n    message += months ? months + \" m \" : \"\";\n    message += days ? days + \" d \" : \"\";\n\n    return message;\n  }\n\n  cinemaWindow(diff) {\n    var day = 1000 * 60 * 60 * 24;\n    var days = Math.ceil(diff / day);\n    if (days >= 31) {\n      return false;\n    }\n    return true;\n  }\n\n  getYear(req) {\n    if (req.media)\n      if (Object.keys(req.media).length > 0) {\n        if (req.type === \"movie\") {\n          return req.media.release_date ? new Date(req.media.release_date).getFullYear() : null;\n        } else {\n          return req.media.first_air_date ? new Date(req.media.first_air_date).getFullYear() : null;\n        }\n      } else {\n        return null;\n      }\n    return null;\n  }\n\n  children(req) {\n    if (!req.children) {\n      return null;\n    }\n    if (req.children.length === 0) {\n      return null;\n    }\n    let render = [];\n    req.children.map((server) => {\n      let type = req.type;\n\n      // let prog = (child.sizeleft / child.size - 1) * -1 * 100;\n      if (server.status.length > 0) {\n        render.push(\n          server.status.map((child, row) => {\n            if (!child) {\n              console.log(req);\n              return null;\n            }\n\n            let prog = (child.sizeleft / child.size - 1) * -1 * 100;\n            return (\n              <>\n                {row === 0 ? (\n                  <tr className=\"sub\">\n                    <td colSpan=\"5\">\n                      <p>Server: {server.info.serverName}</p>\n                    </td>\n                  </tr>\n                ) : null}\n                <tr className=\"child\">\n                  <td>\n                    {type === \"tv\" ? (\n                      <p>\n                        Series: {child.episode.seasonNumber} Episode: {child.episode.episodeNumber}\n                      </p>\n                    ) : null}\n                    {type === \"movie\" ? <p>Movie</p> : null}\n                  </td>\n                  <td>\n                    <span className=\"requests--quality\">{child.quality.quality.name}</span>\n                  </td>\n                  <td>\n                    {\" \"}\n                    <div className=\"requests--prog--wrap\">\n                      <div className=\"requests--prog\">\n                        <span\n                          className=\"requests--prog--active\"\n                          style={{\n                            width: prog + \"%\",\n                          }}\n                        ></span>\n                      </div>\n\n                      {(child.status !== \"Downloading\" && child.status !== \"downloading\") || !child.timeleft ? (\n                        <p>\n                          <strong className=\"capitalise\">{child.status}</strong>\n                        </p>\n                      ) : (\n                        <p>\n                          Time left <strong>{child.timeleft}</strong>\n                        </p>\n                      )}\n                    </div>\n                  </td>\n                  <td></td>\n                </tr>\n              </>\n            );\n          })\n        );\n      } else {\n        return null;\n      }\n    });\n    return render;\n  }\n\n  reqState(req) {\n    if (req.children) {\n      if (req.children.length > 0) {\n        for (let r = 0; r < req.children.length; r++) {\n          if (req.children[r].status.length > 0) {\n            return <span className=\"requests--status requests--status__orange\">Downloading</span>;\n          }\n\n          if (req.children[r].info.downloaded || req.children[r].info.movieFile) {\n            return <span className=\"requests--status requests--status__good\">Downloaded</span>;\n          }\n\n          if (req.children[r].info.message === \"NotFound\") {\n            return <span className=\"requests--status requests--status__bad\">Removed</span>;\n          }\n\n          if (req.type === \"tv\" && req.children[r].info) {\n            if (req.children[r].info.episodeCount === req.children[r].info.episodeFileCount && req.children[r].info.episodeCount > 0) {\n              return <span className=\"requests--status requests--status__good\">Downloaded</span>;\n            }\n\n            if (req.children[r].info.seasons) {\n              let missing = false;\n              for (let season of req.children[r].info.seasons) {\n                if (season.statistics.percentOfEpisodes !== 100) missing = true;\n              }\n\n              if (!missing) {\n                return <span className=\"requests--status requests--status__good\">Downloaded</span>;\n              } else {\n                let airDate = req.children[r].info.firstAired;\n                var diff = Math.ceil(new Date(airDate) - new Date());\n                if (diff > 0) {\n                  return <span className=\"requests--status requests--status__blue\">~{this.calcDate(diff)}</span>;\n                } else {\n                  if (req.children[r].info.episodeFileCount > 0) {\n                    return <span className=\"requests--status requests--status__blue\">Partially Downloaded</span>;\n                  }\n                  return <span className=\"requests--status requests--status__bad\">Unavailable</span>;\n                }\n              }\n            }\n          }\n\n          if (req.type === \"movie\" && req.children[r].info) {\n            if (req.children[r].info.inCinemas || req.children[r].info.digitalRelease) {\n              if (req.children[r].info.inCinemas) {\n                var diff = Math.ceil(new Date(req.children[r].info.inCinemas) - new Date());\n                if (diff > 0) {\n                  return <span className=\"requests--status requests--status__blue\">~{this.calcDate(diff)}</span>;\n                }\n              }\n              if (req.children[r].info.digitalRelease) {\n                let digitalDate = new Date(req.children[r].info.digitalRelease);\n                if (new Date() - digitalDate < 0) {\n                  return <span className=\"requests--status requests--status__cinema\">In Cinemas</span>;\n                } else {\n                  return <span className=\"requests--status requests--status__bad\">Unavailable</span>;\n                }\n              } else {\n                if (req.children[r].info.inCinemas) {\n                  var diff = Math.ceil(new Date() - new Date(req.children[r].info.inCinemas));\n                  if (this.cinemaWindow(diff)) {\n                    return <span className=\"requests--status requests--status__cinema\">In Cinemas</span>;\n                  }\n                }\n                return <span className=\"requests--status requests--status__bad\">Unavailable</span>;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return <span className=\"requests--status requests--status__manual\">No status</span>;\n  }\n\n  render() {\n    return (\n      <table className=\"generic-table generic-table__rounded\">\n        <thead>\n          <tr>\n            <th className=\"fixed\">Title</th>\n            <th>Year</th>\n            <th>Type</th>\n            <th>Status</th>\n            <th>Users</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.props.requests).length === 0 ? (\n            <tr>\n              <td>No requests</td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n            </tr>\n          ) : (\n            Object.keys(this.props.requests).map((key) => {\n              let req = this.props.requests[key];\n\n              return (\n                <React.Fragment key={key}>\n                  <tr>\n                    <td>{req.title}</td>\n                    <td>{this.getYear(req)}</td>\n                    <td>{this.typeIcon(req.type)}</td>\n                    <td>\n                      {this.reqState(req)}\n                      {req.sonarrId.length > 0 ? <span className=\"requests--status requests--status__sonarr\">Sonarr</span> : null}\n                      {req.radarrId.length > 0 ? <span className=\"requests--status requests--status__radarr\">Radarr</span> : null}\n                    </td>\n                    <td>\n                      {req.users.map((user, i) => {\n                        return <p key={`${req.id}_${user}_${i}`}>{this.getUsername(user)}</p>;\n                      })}\n                    </td>\n                    <td></td>\n                  </tr>\n                  {this.children(req)}\n                </React.Fragment>\n              );\n            })\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default RequestsTable;\n","/Users/ashleydyson/Documents/Petio/petio/admin/src/page/settings/modal.js",[],"/Users/ashleydyson/Documents/Petio/petio/admin/src/page/Users.js",["236"],"/Users/ashleydyson/Documents/Petio/petio/admin/src/components/Modal.js",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":14,"column":2,"nodeType":"243","messageId":"244","endLine":16,"endColumn":3},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":17},{"ruleId":"249","severity":1,"message":"250","line":13,"column":1,"nodeType":"251","messageId":"252","endLine":15,"endColumn":2},{"ruleId":"245","severity":1,"message":"253","line":75,"column":9,"nodeType":"247","messageId":"248","endLine":75,"endColumn":17},{"ruleId":"254","severity":1,"message":"255","line":114,"column":37,"nodeType":"256","messageId":"257","endLine":114,"endColumn":39},{"ruleId":"254","severity":1,"message":"255","line":133,"column":25,"nodeType":"256","messageId":"257","endLine":133,"endColumn":27},{"ruleId":"254","severity":1,"message":"255","line":178,"column":39,"nodeType":"256","messageId":"257","endLine":178,"endColumn":41},{"ruleId":"258","severity":1,"message":"259","line":3,"column":1,"nodeType":"260","endLine":34,"endColumn":2},{"ruleId":"261","severity":1,"message":"262","line":28,"column":23,"nodeType":"263","endLine":28,"endColumn":65},{"ruleId":"241","severity":1,"message":"242","line":14,"column":2,"nodeType":"243","messageId":"244","endLine":16,"endColumn":3},{"ruleId":"245","severity":1,"message":"264","line":2,"column":37,"nodeType":"247","messageId":"248","endLine":2,"endColumn":41},{"ruleId":"245","severity":1,"message":"265","line":2,"column":43,"nodeType":"247","messageId":"248","endLine":2,"endColumn":53},{"ruleId":"245","severity":1,"message":"266","line":2,"column":55,"nodeType":"247","messageId":"248","endLine":2,"endColumn":65},{"ruleId":"261","severity":1,"message":"262","line":40,"column":15,"nodeType":"263","endLine":40,"endColumn":118},{"ruleId":"261","severity":1,"message":"262","line":46,"column":15,"nodeType":"263","endLine":46,"endColumn":99},{"ruleId":"258","severity":1,"message":"267","line":33,"column":1,"nodeType":"260","endLine":63,"endColumn":3},{"ruleId":"245","severity":1,"message":"268","line":3,"column":7,"nodeType":"247","messageId":"248","endLine":3,"endColumn":13},{"ruleId":"241","severity":1,"message":"242","line":14,"column":2,"nodeType":"243","messageId":"244","endLine":16,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":3,"column":1,"nodeType":"260","endLine":47,"endColumn":2},{"ruleId":"258","severity":1,"message":"259","line":3,"column":1,"nodeType":"260","endLine":165,"endColumn":2},{"ruleId":"269","severity":1,"message":"270","line":31,"column":7,"nodeType":"271","messageId":"252","endLine":31,"endColumn":13},{"ruleId":"269","severity":1,"message":"272","line":34,"column":7,"nodeType":"271","messageId":"252","endLine":34,"endColumn":11},{"ruleId":"269","severity":1,"message":"273","line":35,"column":7,"nodeType":"271","messageId":"252","endLine":35,"endColumn":14},{"ruleId":"269","severity":1,"message":"270","line":215,"column":9,"nodeType":"271","messageId":"252","endLine":215,"endColumn":15},{"ruleId":"269","severity":1,"message":"270","line":240,"column":7,"nodeType":"271","messageId":"252","endLine":240,"endColumn":13},{"ruleId":"274","severity":1,"message":"275","line":247,"column":8,"nodeType":"276","endLine":247,"endColumn":23},{"ruleId":"269","severity":1,"message":"270","line":31,"column":7,"nodeType":"271","messageId":"252","endLine":31,"endColumn":13},{"ruleId":"269","severity":1,"message":"272","line":34,"column":7,"nodeType":"271","messageId":"252","endLine":34,"endColumn":11},{"ruleId":"269","severity":1,"message":"273","line":35,"column":7,"nodeType":"271","messageId":"252","endLine":35,"endColumn":14},{"ruleId":"269","severity":1,"message":"270","line":215,"column":9,"nodeType":"271","messageId":"252","endLine":215,"endColumn":15},{"ruleId":"269","severity":1,"message":"270","line":240,"column":7,"nodeType":"271","messageId":"252","endLine":240,"endColumn":13},{"ruleId":"245","severity":1,"message":"277","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":11},{"ruleId":"254","severity":1,"message":"255","line":448,"column":25,"nodeType":"256","messageId":"257","endLine":448,"endColumn":27},{"ruleId":"258","severity":1,"message":"267","line":3,"column":1,"nodeType":"260","endLine":7,"endColumn":3},{"ruleId":"258","severity":1,"message":"267","line":3,"column":1,"nodeType":"260","endLine":5,"endColumn":3},{"ruleId":"245","severity":1,"message":"265","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":20},{"ruleId":"245","severity":1,"message":"264","line":2,"column":22,"nodeType":"247","messageId":"248","endLine":2,"endColumn":26},{"ruleId":"245","severity":1,"message":"246","line":3,"column":10,"nodeType":"247","messageId":"248","endLine":3,"endColumn":17},{"ruleId":"245","severity":1,"message":"278","line":5,"column":10,"nodeType":"247","messageId":"248","endLine":5,"endColumn":23},{"ruleId":"261","severity":1,"message":"262","line":130,"column":7,"nodeType":"263","endLine":130,"endColumn":41},{"ruleId":"254","severity":1,"message":"255","line":136,"column":34,"nodeType":"256","messageId":"257","endLine":136,"endColumn":36},{"ruleId":"254","severity":1,"message":"255","line":36,"column":50,"nodeType":"256","messageId":"257","endLine":36,"endColumn":52},{"ruleId":"254","severity":1,"message":"279","line":80,"column":31,"nodeType":"256","messageId":"280","endLine":80,"endColumn":33},{"ruleId":"281","severity":1,"message":"282","line":197,"column":21,"nodeType":"247","messageId":"283","endLine":197,"endColumn":25},{"ruleId":"281","severity":1,"message":"282","line":211,"column":23,"nodeType":"247","messageId":"283","endLine":211,"endColumn":27},{"ruleId":"245","severity":1,"message":"277","line":2,"column":8,"nodeType":"247","messageId":"248","endLine":2,"endColumn":11},"no-native-reassign",["284"],"no-negated-in-lhs",["285"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","no-extend-native","Number prototype is read only, properties should not be added.","AssignmentExpression","unexpected","'msPerDay' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'withRouter' is defined but never used.","'useHistory' is defined but never used.","Assign object to a variable before exporting as module default","'widths' is assigned a value but never used.","no-dupe-keys","Duplicate key 'active'.","ObjectExpression","Duplicate key 'path'.","Duplicate key 'profile'.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Api' is defined but never used.","'LazyLoadImage' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-redeclare","'diff' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]